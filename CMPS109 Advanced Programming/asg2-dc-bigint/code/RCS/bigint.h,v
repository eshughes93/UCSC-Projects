head	1.9;
access;
symbols;
locks;
comment	@ * @;


1.9
date	2014.04.11.18.58.33;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.04.11.18.57.23;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.04.09.02.15.08;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.04.09.02.04.03;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.07.06.03.19.45;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.07.06.03.13.50;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.06.27.19.39.10;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.04.11.04.02.20;	author -;	state -;
branches;
next	1.1;

1.1
date	2011.01.19.06.17.09;	author -;	state -;
branches;
next	;


desc
@@


1.9
log
@-
@
text
@// $Id: bigint.h,v 1.8 2014-04-11 11:57:23-07 - - $

#ifndef __BIGINT_H__
#define __BIGINT_H__

#include <exception>
#include <iostream>
#include <utility>
using namespace std;

#include "debug.h"

//
// Define class bigint
//
class bigint {
      friend ostream& operator<< (ostream&, const bigint&);
   private:
      long long_value;
      typedef pair<bigint,bigint> quotient_remainder;
      quotient_remainder divide (const bigint&) const;
   public:
      //
      // Override implicit members.
      //
      bigint();
      bigint (const bigint&);
      bigint& operator= (const bigint&);
      ~bigint();
      //
      // Extra ctors to make bigints.
      //
      bigint (const long);
      bigint (const string&);
      //
      // Basic add/sub operators.
      //
      bigint operator+ (const bigint&) const;
      bigint operator- (const bigint&) const;
      bigint operator-() const;
      long to_long() const;
      //
      // Extended operators implemented with add/sub.
      //
      bigint operator* (const bigint&) const;
      bigint operator/ (const bigint&) const;
      bigint operator% (const bigint&) const;
      //
      // Comparison operators.
      //
      bool operator== (const bigint&) const;
      bool operator<  (const bigint&) const;
};


bigint pow (const bigint& base, const bigint& exponent);

//
// Rest of the comparisons don't need to be members.
//
#define BOOLOPER(OPER,EXPRESSION) \
inline bool operator OPER (const bigint &left, const bigint &right) { \
   return EXPRESSION; \
}
BOOLOPER(!=, not (left == right))
BOOLOPER(> , right < left       )
BOOLOPER(<=, not (right < left) )
BOOLOPER(>=, not (left < right) )

//
// Operators with a left operand long and right operand bigint.
//
#define LONGLEFT(RTYPE,OPER) \
inline RTYPE operator OPER (long left, const bigint& right) { \
   return bigint (left) OPER right; \
}
LONGLEFT(bigint,+)
LONGLEFT(bigint,-)
LONGLEFT(bigint,*)
LONGLEFT(bigint,/)
LONGLEFT(bigint,%)
LONGLEFT(bool,==)
LONGLEFT(bool,<)
LONGLEFT(bool,!=)
LONGLEFT(bool,>)
LONGLEFT(bool,<=)
LONGLEFT(bool,>=)

#endif

@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: bigint.h,v 1.7 2014-04-08 19:15:08-07 - - $
d66 3
a68 3
BOOLOPER(> , right < left)
BOOLOPER(<=, not (right < left))
BOOLOPER(>=, not (left < right))
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: bigint.h,v 1.6 2014-04-08 19:04:03-07 - - $
d61 27
a87 48

inline bool operator!= (const bigint &left, const bigint &right) {
   return not (left == right);
}

inline bool operator>  (const bigint &left, const bigint &right) {
   return right < left;
}

inline bool operator<= (const bigint &left, const bigint &right) {
   return not (right < left);
}

inline bool operator>= (const bigint &left, const bigint &right) {
   return not (left < right);
}

//
// Operators with a left side of long.
//

inline bigint operator+ (long left, const bigint& right) {
   return bigint (left) + right;
}

inline bigint operator- (long left, const bigint& right) {
   return bigint (left) - right;
}

inline bigint operator* (long left, const bigint& right) {
   return bigint (left) * right;
}

inline bigint operator/ (long left, const bigint& right) {
   return bigint (left) / right;
}

inline bigint operator% (long left, const bigint& right) {
   return bigint (left) % right;
}

inline bool operator== (long left, const bigint& right) {
   return bigint (left) == right;
}

inline bool operator< (long left, const bigint& right) {
   return bigint (left) < right;
}
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: bigint.h,v 1.5 2013-07-05 20:19:45-07 - - $
d20 2
a21 2
      enum div_rem_op {QUOTIENT, REMAINDER};
      bigint divide (const bigint&, const div_rem_op) const;
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: bigint.h,v 1.4 2013-07-05 20:13:50-07 - - $
d8 1
a8 1

d11 1
a11 1
#include "trace.h"
d17 1
a17 1
      friend ostream &operator<< (ostream &, const bigint &);
d21 1
a21 1
      bigint divide (const bigint &, const div_rem_op) const;
d26 4
a29 4
      bigint ();
      bigint (const bigint &);
      bigint &operator= (const bigint &);
      ~bigint ();
d34 1
a34 1
      bigint (const string &);
d38 4
a41 4
      bigint operator+ (const bigint &) const;
      bigint operator- (const bigint &) const;
      bigint operator- () const;
      long to_long () const;
d45 3
a47 3
      bigint operator* (const bigint &) const;
      bigint operator/ (const bigint &) const;
      bigint operator% (const bigint &) const;
d51 2
a52 2
      bool operator== (const bigint &) const;
      bool operator<  (const bigint &) const;
d56 5
a60 1
bigint pow (const bigint &base, const bigint &exponent);
d63 1
a63 1
   return ! (left == right);
d66 2
a67 2
inline bool operator<= (const bigint &left, const bigint &right) {
   return ! (right < left);
d70 2
a71 2
inline bool operator>  (const bigint &left, const bigint &right) {
   return right < left;
d75 1
a75 1
   return ! (left < right);
d82 1
a82 1
inline bigint operator+ (long left, const bigint &right) {
d86 1
a86 1
inline bigint operator- (long left, const bigint &right) {
d90 1
a90 1
inline bigint operator* (long left, const bigint &right) {
d94 1
a94 1
inline bigint operator/ (long left, const bigint &right) {
d98 1
a98 1
inline bigint operator% (long left, const bigint &right) {
d102 1
a102 1
inline bool operator== (long left, const bigint &right) {
d106 1
a106 1
inline bool operator< (long left, const bigint &right) {
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: bigint.h,v 1.3 2013-06-27 12:39:10-07 - - $
d55 1
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: bigint.h,v 1.2 2012-04-10 21:02:20-07 - - $
a21 3
      void mul_by_2 ();
      void div_by_2 ();
      static bool abs_less (const long &, const long &);
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: bigint.h,v 1.1 2011-01-18 22:17:09-08 - - $
a7 1
#include <utility>
a12 19
class bigint;
typedef pair <bigint, bigint> bigpair;

//
// Operators with a left side of int.
//
bigint operator+ (int left, const bigint &that);
bigint operator- (int left, const bigint &that);
bigint operator* (int left, const bigint &that);
bigint operator/ (int left, const bigint &that);
bigint operator% (int left, const bigint &that);
bool operator== (int left, const bigint &that);
bool operator!= (int left, const bigint &that);
bool operator<  (int left, const bigint &that);
bool operator<= (int left, const bigint &that);
bool operator>  (int left, const bigint &that);
bool operator>= (int left, const bigint &that);


d19 6
a24 5
      int small_value;
      bigpair div_rem (const bigint &that) const;
      int compare (const bigint &that) const;
      int abscompare (const bigint &that) const;
      bigint mul_by_2 ();
d30 2
a31 2
      bigint (const bigint &that);
      bigint &operator= (const bigint &that);
d36 2
a37 2
      bigint (const int that);
      bigint (const string &that);
d41 2
a42 2
      bigint operator+ (const bigint &that) const;
      bigint operator- (const bigint &that) const;
d44 1
a44 1
      int smallint () const;
d48 3
a50 4
      bigint operator* (const bigint &that) const;
      bigint operator/ (const bigint &that) const;
      bigint operator% (const bigint &that) const;
      bigint pow (const bigint &that) const;
d54 2
a55 6
      bool operator== (const bigint &that) const;
      bool operator!= (const bigint &that) const;
      bool operator<  (const bigint &that) const;
      bool operator<= (const bigint &that) const;
      bool operator>  (const bigint &that) const;
      bool operator>= (const bigint &that) const;
d58 50
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: bigint.h,v 1.2 2011-01-18 21:27:24-08 - - $
d17 19
a81 15
//
// Operators with a left side of int.
//
bigint operator+ (int left, const bigint &that);
bigint operator- (int left, const bigint &that);
bigint operator* (int left, const bigint &that);
bigint operator/ (int left, const bigint &that);
bigint operator% (int left, const bigint &that);
bool operator== (int left, const bigint &that);
bool operator!= (int left, const bigint &that);
bool operator<  (int left, const bigint &that);
bool operator<= (int left, const bigint &that);
bool operator>  (int left, const bigint &that);
bool operator>= (int left, const bigint &that);

@
