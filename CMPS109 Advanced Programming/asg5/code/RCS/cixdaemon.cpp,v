head	1.11;
access;
symbols;
locks;
comment	@// @;


1.11
date	2014.05.27.22.49.34;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.05.27.21.14.13;	author -;	state -;
branches;
next	1.9;

1.9
date	2014.05.27.21.05.04;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.05.27.20.40.23;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.05.27.20.16.05;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.05.27.19.59.02;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.05.27.19.57.20;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.05.27.19.45.44;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.05.24.05.54.44;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.05.24.05.17.25;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.05.24.05.02.59;	author -;	state -;
branches;
next	;


desc
@@


1.11
log
@-
@
text
@// $Id: cixdaemon.cpp,v 1.10 2014-05-27 14:14:13-07 - - $

#include <iostream>
#include <string>
#include <vector>
using namespace std;

#include <libgen.h>
#include <sys/types.h>
#include <unistd.h>

#include "cix_protocol.h"
#include "logstream.h"
#include "signal_action.h"
#include "sockets.h"

logstream log (cout);
struct cixdaemon_exit: public exception {};

void fork_cixserver (server_socket& server, accepted_socket& accept) {
   pid_t pid = fork();
   if (pid == 0) { // child
      server.close();
      string sock_fd = accept.to_string_socket_fd();
      log << "execlp cixserver (fd" << sock_fd << ")" << endl;
      execlp ("cixserver", "cixserver", sock_fd.c_str(), nullptr);
      // Can't get here?!
      log << "execlp failed: " << strerror (errno) << endl;
      throw cixdaemon_exit();
   }else {
      accept.close();
      if (pid < 0) {
         log << "fork failed: " << strerror (errno) << endl;
      }else {
         log << "forked cixserver pid " << pid << endl;
      }
   }
}

void reap_zombies() {
   for (;;) {
      int status;
      pid_t child = waitpid (-1, &status, WNOHANG);
      if (child <= 0) break;
      log << "child " << child
           << " exit " << (status >> 8)
           << " signal " << (status & 0x7F)
           << " core " << (status >> 7 & 1) << endl;
   }
}



void signal_handler (int signal) {
   log << "signal_handler (" << to_string_signal (signal)
       << ")" << endl;
   reap_zombies();
   if (signal == SIGTERM) throw cixdaemon_exit();
}

int main (int argc, char** argv) {
   log.set_execname (basename (argv[0]));
   log << "starting" << endl;
   vector<string> args (&argv[1], &argv[argc]);
   signal_action (SIGCHLD, signal_handler);
   signal_action (SIGTERM, signal_handler);
   in_port_t port = get_cix_server_port (args, 0);
   try {
      server_socket listener (port);
      for (;;) {
         log << to_string (hostinfo()) << " accepting port "
             << to_string (port) << endl;
         accepted_socket client_sock;
         for (;;) {
            try {
               listener.accept (client_sock);
               break;
            }catch (socket_sys_error& error) {
               if (error.sys_errno != EINTR) throw;
               log << "listener.accept caught EINTR" << endl;
            }
         }
         log << "accepted " << to_string (client_sock) << endl;
         try {
            fork_cixserver (listener, client_sock);
            reap_zombies();
         }catch (socket_error& error) {
            log << error.what() << endl;
         }
      }
   }catch (socket_error& error) {
      log << error.what() << endl;
   }catch (cixdaemon_exit& error) {
      log << "caught cixdaemon_exit" << endl;
   }
   log << "finishing" << endl;
   return 0;
}

@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: cixdaemon.cpp,v 1.9 2014-05-27 14:05:04-07 - - $
d25 1
a25 1
      log << "execlp cixserver " << sock_fd << endl;
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: cixdaemon.cpp,v 1.8 2014-05-27 13:40:23-07 - - $
d18 1
d29 1
a29 1
      exit (1);
d58 1
d93 2
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: cixdaemon.cpp,v 1.7 2014-05-27 13:16:05-07 - - $
d54 2
a55 1
   log << "signal_handler (" << signal << ")" << endl;
d70 1
a70 1
              << to_string (port) << endl;
d72 9
a80 1
         listener.accept (client_sock);
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: cixdaemon.cpp,v 1.6 2014-05-27 12:59:02-07 - - $
d12 1
d64 1
a64 1
   in_port_t port = args.size() < 1 ? 50000 : stoi (args[0]);
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: cixdaemon.cpp,v 1.5 2014-05-27 12:57:20-07 - - $
d13 1
d51 6
d61 2
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: cixdaemon.cpp,v 1.4 2014-05-27 12:45:44-07 - - $
d15 1
a15 1
logstream outlog (cout);
d22 1
a22 1
      outlog << "execlp cixserver " << sock_fd << endl;
d25 1
a25 1
      outlog << "execlp failed: " << strerror (errno) << endl;
d30 1
a30 1
         outlog << "fork failed: " << strerror (errno) << endl;
d32 1
a32 1
         outlog << "forked cixserver pid " << pid << endl;
d42 1
a42 1
      outlog << "child " << child
d51 2
a52 2
   outlog.set_execname (basename (argv[0]));
   outlog << "starting" << endl;
d58 1
a58 1
         outlog << to_string (hostinfo()) << " accepting port "
d62 1
a62 1
         outlog << "accepted " << to_string (client_sock) << endl;
d67 1
a67 1
            outlog << error.what() << endl;
d71 1
a71 1
      outlog << error.what() << endl;
d73 1
a73 1
   outlog << "finishing" << endl;
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: cixdaemon.cpp,v 1.3 2014-05-23 22:54:44-07 - - $
d15 1
a15 1
logstream elog (cout);
d21 3
a23 2
      execlp ("cixserver", "cixserver",
              accept.to_string_socket_fd().c_str(), nullptr);
d25 1
a25 1
      elog << "execlp failed: " << strerror (errno) << endl;
d30 1
a30 1
         elog << "fork failed: " << strerror (errno) << endl;
d32 1
a32 1
         elog << "forked cixserver pid " << pid << endl;
d42 1
a42 1
      elog << "child " << child
d51 2
a52 1
   elog.set_execname (basename (argv[0]));
d58 1
a58 1
         elog << to_string (hostinfo()) << " accepting port "
d62 1
a62 1
         elog << "accepted " << to_string (client_sock) << endl;
d67 1
a67 1
            elog << error.what() << endl;
d71 1
a71 1
      elog << error.what() << endl;
d73 1
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: cixdaemon.cpp,v 1.2 2014-05-23 22:17:25-07 - - $
d15 1
a15 1
logstream elog (cerr);
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: cixdaemon.cpp,v 1.1 2014-05-23 22:02:59-07 - - $
a73 1

@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: cixdaemon.cpp,v 1.1 2014-05-23 21:09:42-07 - - $
d21 2
a22 2
      execlp ("cixserver", "cixserver", accept.sock_fd_string().c_str(),
              nullptr);
d48 1
@
