head	1.12;
access;
symbols;
locks;
comment	@ * @;


1.12
date	2013.05.02.03.49.58;	author -;	state -;
branches;
next	1.11;

1.11
date	2013.05.01.23.36.33;	author -;	state -;
branches;
next	1.10;

1.10
date	2013.05.01.23.33.53;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.05.01.23.33.17;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.05.01.23.29.29;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.05.01.23.27.07;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.05.01.23.26.10;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.05.01.23.20.42;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.05.01.23.20.21;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.05.01.23.19.51;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.05.01.23.18.54;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.05.01.23.15.24;	author -;	state -;
branches;
next	;


desc
@@


1.12
log
@-
@
text
@//Evan Hughes [eshughes@@ucsc.edu]
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include "heap.h"
#define ROOT 1

struct heap {
	int last;
	int size;
	int *keys;
};

heapRef newHeap(int maxSize){
	heapRef new = malloc(sizeof(struct heap)+sizeof(int)*maxSize);
	new->size = maxSize;
	new->last = 0;
	new->keys = calloc(maxSize+1,sizeof(int));
	return new;
}
heapRef buildHeap(int maxSize, int data[], int numData){
	heapRef new = malloc(sizeof(struct heap) + sizeof(int)*maxSize);
	new->size = maxSize;
	new->last = 0;
	new->keys = calloc(maxSize+1, sizeof(int));
	for(int i = 0; i < numData; i++){
		insert(new, data[i]);
	}
	return new;
}

int isFull(heapRef h){
	if(h->last == h->size)
		return 1;
	else
		return 0;
}
int isEmptyHeap(heapRef h){
	if(h->last == 0)
		return 1;
	else
		return 0;
}
int parent(int child){
	return child/2;
}
int lChild(int parent){
	return 2*parent;
}
int rChild(int parent){
	return 2*parent + 1;
}
void swap(heapRef h, int child, int parent){
	int tmp = h->keys[child];
	h->keys[child] = h->keys[parent];
	h->keys[parent] = tmp;
}

int maxValue(heapRef h){
	return h->keys[ROOT];
}
void deleteMax(heapRef h){
	if(!isEmptyHeap(h)){
	swap(h, ROOT, h->last--);
	for(int parent = ROOT; parent < h->last;){
		int lchild = lChild(parent);
		int rchild = rChild(parent);
		if(lchild > h->last) {
			//printf("delete max lchild > h->last, break\n");
			break;
		}
		if(lchild == h->last){
			rchild = lchild;
		}
		if(h->keys[rchild] > h->last && h->keys[rchild] > h->keys[lchild]){
			lchild = rchild;
		}
		if(h->keys[lchild] > h->keys[parent]){
			swap(h, lchild, parent);
			parent = lchild;
		} else {
			break;
		}
	}
	}
}
void insert(heapRef h, int priority){
	h->keys[++h->last] = priority;
	for(int child = h->last; child > ROOT;){
		if(h->keys[child] < h->keys[parent(child)]) {
			break;
		} else {
			swap(h, child, parent(child));
		}
		child = parent(child);
	}
}

void printHeap(heapRef h){
	for(int i = 1; i < h->last+1; i++){
		printf("%d : %d \n", i, h->keys[i]);
	}
}
void heapSort(int keys[], int numKeys){
	heapRef sort = buildHeap(numKeys, keys, numKeys);
	//printHeap(sort);
	for(int i = numKeys-1; i > 0; i--){
		keys[i] = maxValue(sort);
		deleteMax(sort);
	}
}
@


1.11
log
@-
@
text
@d18 11
a28 2
	new->keys = malloc(sizeof(int)*(maxSize+1));
	//new->keys = calloc(maxSize+1,sizeof(int));
a31 1

d38 1
a38 1
int isEmpty(heapRef h){
d58 1
d60 1
a60 1

d63 1
a66 1
		if(h->keys[lchild] > h->last) break;
d68 7
d85 1
d98 13
a110 2
heapRef buildHeap(int maxSize, int data[], int numData){
	
@


1.10
log
@-
@
text
@d11 1
a11 1
	int keys[];
@


1.9
log
@-
@
text
@d18 2
a19 2
	//new->keys = malloc(sizeof(int)*(maxSize+1));
	new->keys = calloc(maxSize+1,sizeof(int));
@


1.8
log
@-
@
text
@d15 1
a15 1
	heapRef new = malloc(sizeof(struct heap));
d18 2
a19 1
	new->keys = malloc(sizeof(int)*(maxSize+1));
d81 1
a81 1
heapRef buildHeap(int maxSize, int[] data, int numData){
@


1.7
log
@-
@
text
@d18 1
a18 1
	new->keys = malloc(sizeof(int*(maxSize+1)));
@


1.6
log
@-
@
text
@d80 1
a80 1
heap buildHeap(int maxSize, int[] data, int numData){
@


1.5
log
@-
@
text
@d6 1
a6 1
#define ROOT = 1
d29 1
a29 1
int isEmpty(heap h){
@


1.4
log
@-
@
text
@d18 1
a18 1
	new->keys = calloc(maxSize+1, sizeof(int));
@


1.3
log
@-
@
text
@d18 1
a18 1
	new->keys = calloc(sizeof(int*(maxSize+1)));
@


1.2
log
@-
@
text
@d12 1
a12 1
}
d15 1
a15 1
	heap new = malloc(sizeof(struct heap));
@


1.1
log
@-
@
text
@d14 1
a14 1
heap newHeap(int maxSize){
d23 1
a23 1
int isFull(heap h){
d44 1
a44 1
void swap(heap h, int child, int parent){
d49 1
a49 1
int maxValue(heap h){
d52 1
a52 1
void deleteMax(heap h){
d69 1
a69 1
void insert(heap h, int priority){
@
