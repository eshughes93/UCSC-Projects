head	1.13;
access;
symbols;
locks;
comment	@ * @;


1.13
date	2013.04.18.22.42.07;	author -;	state -;
branches;
next	1.12;

1.12
date	2013.04.18.22.41.30;	author -;	state -;
branches;
next	1.11;

1.11
date	2013.04.18.22.41.06;	author -;	state -;
branches;
next	1.10;

1.10
date	2013.04.18.22.38.39;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.04.18.22.34.47;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.04.18.22.16.34;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.04.18.22.16.17;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.04.18.22.16.01;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.04.18.21.56.45;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.04.18.21.33.40;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.04.18.21.30.41;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.04.18.21.21.15;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.04.18.21.14.15;	author -;	state -;
branches;
next	;


desc
@@


1.13
log
@-
@
text
@//Evan Hughes [eshughes@@ucsc.edu]
// Driver file for Linked List ADT
#include "List.h"

int main (int argc, char **argv){
    ListRef list = newList();
    if(isEmpty(list)){
        printf("Successfully created an empty list\n");
    }
    //4 8 15 16 23 42
    long firstTry = 4;
    long second = 8;
    long third = 15;
    long fourth = 16;
    long fifth = 23;
    long sixth = 42;

    insertBeforeFirst(list, firstTry);
    insertAfterLast(list,second);
    insertAfterLast(list,fourth);
    insertBeforeCurrent(list,third);
    moveLast(list);
    insertAfterCurrent(list,fifth);
    sortedInsert(list,sixth);

    //When they aren't commented out, the print statements in the List.c file 
    // for these functions proves their functionality
    movePrev(list);
    getFirst(list);
    getLast(list);
    getCurrent(list);
    getLength(list);
    
    printList(list);
    printf("Copying List A to List B\n");
    ListRef ListB = copyList(list);
    printf("List A: ");
    printList(list);
    printf("\nList B: ");
    printList(ListB);
    equals(list,ListB);
    printf("\nDeleting current\n");

    deleteCurrent(list);
    printList(list);
    moveFirst(list);
    moveNext(list);
    printf("\nMoving current, attempting to deleteCurrent again.\n");
    getCurrent(list);
    printf("\nDeleting current\n");
    deleteCurrent(list);
    printList(list);


    printf("\nDeleting first\n");

    deleteFirst(list);
    printList(list);
    printf("\nDeleting last\n");

    deleteLast(list);
    printList(list);
    
    printf("\nFreeing Lists\n");
    freeList(list);
    freeList(ListB);

}
@


1.12
log
@-
@
text
@d50 1
@


1.11
log
@-
@
text
@d51 3
@


1.10
log
@-
@
text
@d48 1
@


1.9
log
@-
@
text
@d48 1
@


1.8
log
@-
@
text
@d46 3
@


1.7
log
@-
@
text
@d41 1
a41 1
    equal(list,ListB);
@


1.6
log
@-
@
text
@d41 1
a41 1
    equal(A,B);
@


1.5
log
@-
@
text
@d41 1
a41 1

@


1.4
log
@-
@
text
@d55 1
a55 1
    printf("\nFreeing List\n");
d57 1
@


1.3
log
@-
@
text
@a40 2
    printf("\n");

@


1.2
log
@-
@
text
@d33 10
a43 1
    printList(list);
@


1.1
log
@-
@
text
@d48 2
@
